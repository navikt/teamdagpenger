{"searchDocs":[{"title":"Innbyggerflate","type":0,"sectionRef":"#","url":"/teamdagpenger/docs/innbyggerflate","content":"Innbyggerflate Team innbyggerflate er ett av tre team i Dagpengeklynga som skal lage ny vedtaksløsning for dagpenger, slik at vi kan komme ut av Arena. Vi har ansvar løsninger som retter seg mot innbyggere i form av søknadsdialogen for dagpenger og skal lage ny funksjonalitet som rapporteringsløsningen.","keywords":"","version":"Next"},{"title":"Nav.no","type":0,"sectionRef":"#","url":"/teamdagpenger/docs/innbyggerflate/løsninger/nav.no","content":"Nav.no","keywords":"","version":"Next"},{"title":"Rapportering","type":0,"sectionRef":"#","url":"/teamdagpenger/docs/innbyggerflate/løsninger/Rapportering","content":"Rapportering","keywords":"","version":"Next"},{"title":"Dagpengesøknad","type":0,"sectionRef":"#","url":"/teamdagpenger/docs/innbyggerflate/løsninger/soknadsdialog","content":"","keywords":"","version":"Next"},{"title":"Oversikt​","type":1,"pageTitle":"Dagpengesøknad","url":"/teamdagpenger/docs/innbyggerflate/løsninger/soknadsdialog#oversikt","content":" Loading...  ","version":"Next","tagName":"h3"},{"title":"Abonnerer på hendelser​","type":1,"pageTitle":"Dagpengesøknad","url":"/teamdagpenger/docs/innbyggerflate/løsninger/soknadsdialog#abonnerer-på-hendelser","content":" Loading...  ","version":"Next","tagName":"h3"},{"title":"Publiserer hendelser​","type":1,"pageTitle":"Dagpengesøknad","url":"/teamdagpenger/docs/innbyggerflate/løsninger/soknadsdialog#publiserer-hendelser","content":" Loading... ","version":"Next","tagName":"h3"},{"title":"Systemkart","type":0,"sectionRef":"#","url":"/teamdagpenger/docs/innbyggerflate/løsninger/systemkart","content":"","keywords":"","version":"Next"},{"title":"Overordnet arkitektur​","type":1,"pageTitle":"Systemkart","url":"/teamdagpenger/docs/innbyggerflate/løsninger/systemkart#overordnet-arkitektur","content":" Loading... ","version":"Next","tagName":"h3"},{"title":"Meldeplikt","type":0,"sectionRef":"#","url":"/teamdagpenger/docs/innbyggerflate/løsninger/meldeplikt","content":"","keywords":"","version":"Next"},{"title":"Kort om meldekort​","type":1,"pageTitle":"Meldeplikt","url":"/teamdagpenger/docs/innbyggerflate/løsninger/meldeplikt#kort-om-meldekort","content":" Når man får Dagpenger (DP), Arbeidsavklaringspenger (AAP) eller Tiltakspenger (TP) har man meldeplikt. Dvs. man må sende meldekort hver fjortende dag. Meldekortet er et skjema man fyller ut, der man gir NAV opplysninger om blant annet jobb, aktiviteter og fravær de siste 14 dagene.  Team Dagpenger &quot;arvet&quot; ansvaret for å gjøre endringer og oppgraderinger i meldekort-løsningen fordi alle fra Team Meldekort ble flyttet til Team Dagpenger. Dagpenger-delen i meldekort-løsningen skal erstattes med dp-rapportering-frontend. Team Dagpenger tenkte å prøve den nye løsningen med begrenset antall brukere først. For å velge brukere som skulle sendes til den nye løsningen, ble opprettet en mekanisme som sjekker hvem som skal sendes:  Det finnes en tabell i meldkort-api sin database som inneholder fødselsnummerHvis fødselsnumeret til bruker er i denne tabellen, sendes brukeren til den nye løsningen  ","version":"Next","tagName":"h2"},{"title":"Arkitektur​","type":1,"pageTitle":"Meldeplikt","url":"/teamdagpenger/docs/innbyggerflate/løsninger/meldeplikt#arkitektur","content":" Loading...  ","version":"Next","tagName":"h2"},{"title":"Applikasjoner​","type":1,"pageTitle":"Meldeplikt","url":"/teamdagpenger/docs/innbyggerflate/løsninger/meldeplikt#applikasjoner","content":" Meldekort frontendMeldekort mikrofrontendMeldekort APIMeldekortserviceMeldekortkontroll API   VIKTIG! Tekster som vises i meldekort-frontend kommer fra meldekort-api. Vi må vise de tekstene som var gyldige for det valgte meldekortet (for den meldeperioden). Det finnes fortsatt 2 filer med tekster i meldekort (src\\app\\mock\\responses\\tekster_nb.json og src\\app\\mock\\responses\\tekster_en.json), men disse er ment for lokalkjøring/testing og inneholder ikke alle/siste versjoner av tekstene. meldekort-api har en tabell med tekstene i sin database. Denne tabellen er fylt ut ved hjelp av R__recreate_texts-migrasjonen og har disse kolonnene:  kodeverdisprakfra_dato  For å opprette en tekst i denne tabellen må man skrive i R__recreate_texts, f.eks:  INSERT INTO tekst (kode, verdi, sprak, fra_dato) VALUES ('overskrift.bruttoBelop', 'Brutto beløp ', 'nb', TO_DATE('1000-01-01', 'YYYY-MM-DD')); INSERT INTO tekst (kode, verdi, sprak, fra_dato) VALUES ('overskrift.bruttoBelop', 'Gross amount ', 'en', TO_DATE('1000-01-01', 'YYYY-MM-DD'));   Dato 1000-01-01 betyr at denne teksten skal i praksis gjelde for alle meldekort  For å ha forskjellige versjoner av samme tekst:  INSERT INTO tekst (kode, verdi, sprak, fra_dato) VALUES ('textKode', 'Tekst v1 ', 'nb', TO_DATE('1000-01-01', 'YYYY-MM-DD')); INSERT INTO tekst (kode, verdi, sprak, fra_dato) VALUES ('textKode', 'Text v1 ', 'en', TO_DATE('1000-01-01', 'YYYY-MM-DD')); INSERT INTO tekst (kode, verdi, sprak, fra_dato) VALUES ('textKode', 'Tekst v2 ', 'nb', TO_DATE('2023-10-29', 'YYYY-MM-DD')); INSERT INTO tekst (kode, verdi, sprak, fra_dato) VALUES ('textKode', 'Text v2 ', 'en', TO_DATE('2023-10-29', 'YYYY-MM-DD'));   Da skal v1 vises når man har en aktiv meldeperiode som er før 2023-10-29 og v2 skal vises for meldeperioder etter 2023-10-29.  ","version":"Next","tagName":"h2"},{"title":"Utvikling​","type":1,"pageTitle":"Meldeplikt","url":"/teamdagpenger/docs/innbyggerflate/løsninger/meldeplikt#utvikling","content":" ###Vanlig utviklingsprosess  Opprett en ny branch Gjør nødvendige endringer i denne branchen Deploy branchen til Q1 og/eller Q2. For å gjøre dette: Åpne GitHub repo &gt; Actions &gt; Build and Deploy to dev &gt; Run workflow &gt; Velg riktig branchVelg miljø Q1 eller Q2 &gt; Run workflow Sjekk endringene i Q1 og/eller Q2 Opprett en pull request Når PRen er sjekket, merge branchen til master Bygg release. For å gjøre dette: Åpne GitHub repo &gt; Actions &gt; Build and Deploy to dev &gt; Run workflow &gt; Velg master branchvelg miljø Q1 eller Q2, velg bump &gt; Run workflow Deploy release til prod (Når er det smartest å release til prod?). For å gjøre dette: Åpne GitHub repo &gt; Actions &gt; Deploy release to dev or prod &gt; Run workflow &gt; Velg master branchskriv inn &quot;p&quot; som Miljø, skriv inn den versjonen som skal deployes &gt; Run workflow Sjekk at alt fungerer (Overvåkning) Oppdater Confluence  ","version":"Next","tagName":"h2"},{"title":"Når er det smartest å release til prod?​","type":1,"pageTitle":"Meldeplikt","url":"/teamdagpenger/docs/innbyggerflate/løsninger/meldeplikt#når-er-det-smartest-å-release-til-prod","content":" Flertallet sender meldekortene sine fra fredag til mandag. Det betyr at det ikke er veldig smart å deploye noe til prod i disse dagene med mindre det er en prodfeil fiks. Det er bedre å deploye til prod fra tirsdag til torsdag.  Antall REST-kall for å kontrollere meldekort per ukedag fra mandag til søndag  ","version":"Next","tagName":"h3"},{"title":"Overvåkning​","type":1,"pageTitle":"Meldeplikt","url":"/teamdagpenger/docs/innbyggerflate/løsninger/meldeplikt#overvåkning","content":" Nyttig Grafana dashboard for å sjekke at alt fungerer og meldekort kommer innmeldekort-api dashboardmeldekortservice dashboard  Man kan også sjekke kall_logg-tabellene i meldekort-api, meldekorservice og meldekortkontroll-api. Disse applikasjonene logger alle requeste'er som kommer inn og alle request'er de sender ut og alle respons'er. Logg slettes etter 30 dager i meldekorservice, 90 dager i meldekort-api, 120 dager i meldekortkontroll-api. ","version":"Next","tagName":"h2"},{"title":"Sak og behandling","type":0,"sectionRef":"#","url":"/teamdagpenger/docs/sak-og-behandling","content":"Sak og behandling Dette er dummy data","keywords":"","version":"Next"},{"title":"Prinsipper","type":0,"sectionRef":"#","url":"/teamdagpenger/docs/innbyggerflate/prinsipper/kodekvalitet","content":"","keywords":"","version":"Next"},{"title":"Introduksjon​","type":1,"pageTitle":"Prinsipper","url":"/teamdagpenger/docs/innbyggerflate/prinsipper/kodekvalitet#introduksjon","content":" Kode lever. Det er ikke noe man skriver og glemmer. Brukere ønsker nye funksjoner. Feil må fikses. Koden skal være enkel å forstå, selv om du ikke har sett den før eller det har gått lang tid siden du sist så på koden. Dette er grunnen til at kodekvalitet er viktig. Programmering handler mer om å skrive kode som du og dine medarbeidere kan forstå, og mindre om å vise hvor flink du er med programmeringsspråket ditt.  En forskjell mellom en dyktig programmerer og en profesjonell programmerer er at den profesjonelle programmereren forstår at klarhet er viktig.  Profesjonelle bruker sine ferdigheter til å skrive kode som andre kan forstå.  ","version":"Next","tagName":"h2"},{"title":"Hvordan måle kodekvalitet​","type":1,"pageTitle":"Prinsipper","url":"/teamdagpenger/docs/innbyggerflate/prinsipper/kodekvalitet#hvordan-måle-kodekvalitet","content":"   Vurder en bygning med noen ødelagte vinduer. Hvis vinduene ikke blir reparert, er tendensen at hærverkere ødelegger flere vinduer. Til slutt &gt;kan de til og med bryte seg inn i bygningen, og hvis den står tom, kanskje til og med okkupere den eller tenne branner inni. James Q. Wilson og George Kelling, 1982 - Broken windows theory  ","version":"Next","tagName":"h2"},{"title":"Clean code​","type":1,"pageTitle":"Prinsipper","url":"/teamdagpenger/docs/innbyggerflate/prinsipper/kodekvalitet#clean-code","content":" Clean code ser ut som om den ble skrevet av noen som bryr seg.  Clean code  : Med clean code mener vi lesbare kode eller obvious code  ","version":"Next","tagName":"h2"},{"title":"Navngivning​","type":1,"pageTitle":"Prinsipper","url":"/teamdagpenger/docs/innbyggerflate/prinsipper/kodekvalitet#navngivning","content":" Navnet på en variabel, funksjon eller klasse bør besvare alle de viktige spørsmålene. Det bør fortelle deg hvorfor det eksisterer, hva det gjør, og hvordan det brukes.  Hvis et navn krever en kommentar, avslører ikke navnet sin hensikt.  Kall det for det det er.​  Ikke kall en spade for en spade. Kall en sandkassespade for en sandkassespade og en anleggsspade for en anleggsspade.  Eksempel på dårlig kode​  public String getOrgNr() { String[] split = description.split(&quot;-&quot;); return split[0].trim(); }   Eksempel på bedre kode​  public String getOrganisasjonsnummerFraBeskrivelse() { String[] split = description.split(&quot;-&quot;); return split[0].trim(); }   Unngå forkortelser​  Eksempel på dårlig kode​  NIDPPrincipal up = resolveUserPrincipal(); UserAuthority ua = nidpPrincipal.getAuthority();   Eksempel på bedre kode​  NIDPPrincipal nidpPrincipal = resolveUserPrincipal(); UserAuthority userAuthority = nidpPrincipal.getAuthority();   Navngivning og omfang​  Eksempel på dårlig kode​  class FakturaService { public static long nummer = 123456789; ... }   Eksempel på bedre kode​  class FakturaService { public static long MAKS_FAKTURABELØP = 123456789; }   for(int i=0;i&lt; 10;i++){ }   Prøv å gjøre koden menneskelesbar​  if (arbeidsforholdErAvsluttet())   // eller  if (erArbeidsforholdAvsluttet())   ","version":"Next","tagName":"h3"},{"title":"Struktur​","type":1,"pageTitle":"Prinsipper","url":"/teamdagpenger/docs/innbyggerflate/prinsipper/kodekvalitet#struktur","content":" Prinsipp om single responsibility​  En klasse/metode skal kun ha én grunn til å bli endret.  Prinsippet om single responsibility  Små biter​  Små klasser og metoder er lettere å teste, gjenbruke og vedlikeholde. Det er også lettere å gi riktige navn til små biter av kode.  Det er i det minste følgende grunner til å trekke ut kode til en klasse eller metode:  LesbarhetTestingGjenbruk  Størrelsesregler: Den første regelen for klasser er at de skal være små. Den andre regelen for klasser er at de skal være mindre enn det.  Pakkestruktur​  Pakkestrukturen bør organiseres etter funksjoner/forretningslogikk og ikke tekniske aspekter.  Strukturen gjorde det også tyngre å resonere rundt endring, og hvordan endringen treffer kodebasen. Større deler av pakkestrukturen var stort sett alltid involvert. Hver commit er en ny deploy til prod, del 3 - Terje Heen  En pakke som inneholder koden til et deldomene bør kunne stå helt på egne bein. Den bør kunne taes ut av applikasjonen og legges inne i en annen applikasjon uten store problemer.  Eksempel på dårlig pakkestruktur​    Eksempel på bedre pakkestruktur​    Komponentstruktur​  SKAL VI HA NOE HER?  ","version":"Next","tagName":"h3"},{"title":"Kommentarer​","type":1,"pageTitle":"Prinsipper","url":"/teamdagpenger/docs/innbyggerflate/prinsipper/kodekvalitet#kommentarer","content":" Tommelfingerregel:  Kodekommentarer er potensielle løgner!  Tommelfingerregelen er at kommentarer ikke bør brukes. Hvis du befinner deg i en situasjon der du ønsker å skrive en kommentar, er det sannsynligvis noe galt med koden din.  Eksempel på dårlig kode​  // Hvis salgsordregruppeBeskrivelse er tom if (salgsordregruppeBeskrivelse == null || salgsordregruppeBeskrivelse.length() == 0) { return &quot;&quot;; }   Eksempel på bedre kode​  if (erSalgsordregruppeBeskrivelseTom()) return &quot;&quot;; privat boolean erSalgsordregruppeBeskrivelseTom() { return salgsordregruppeBeskrivelse == null || salgsordregruppeBeskrivelse.length() == 0; }   Når kommentarer er nødvendige​  Kommentarer er, i beste fall, en nødvendig ondskap.  I noen tilfeller er kommentarer nødvendige:  For å forklare hvorfor løsningen er implementert på denne måten​  For eksempel en midlertidig løsning for en feil i en ekstern avhengighet:  FakturagrunnlagResource-faktura = fakturafabrikk.lagFaktura(claim); // Visma Enterprise har et problem hvis mer enn én faktura opprettes med // ett sekunds mellomrom. Derfor forsinkelse hvis nødvendig. forsinkOrdreSending.forsinkHvisNødvendig(); URI plassering = restUtil.post(fakturaSluttPunkt, faktura);   Åpne API-er​  Hvis vi har åpne API-er som:  Kode som en delt bibliotek (KDoc/Javadoc)REST-API-er (OpenAPI-spesifikasjon (OAS))  kan det være en god idé å ha kommentarer.  Eksempel  /** * Representerer en aktivitet som er gjort i tilknytning til en hendelse. * * @property melding knyttet til aktiviteten * @property kontekst liste med [Kontekst] for aktiviteten * @property tidsstempel for når aktiviteten ble gjort. Blir automatisk satt til tidspunktet for når * Aktivitet blir laget hvis ikke annet er angitt */ class Aktivitet( private val melding: String, private val kontekst: List&lt;Kontekst&gt;, private val tidsstempel: LocalDateTime = LocalDateTime.now(), ) { /** * @return meldingen i aktiviteten */ fun melding() = melding /** * @return tidsstempelet til aktiviteten */ fun tidsstempel() = tidsstempel /** * @return liste over kontekster knyttet til aktiviteten */ fun kontekst() = kontekst }   Document Kotlin code: KDoc  ","version":"Next","tagName":"h3"},{"title":"Testing​","type":1,"pageTitle":"Prinsipper","url":"/teamdagpenger/docs/innbyggerflate/prinsipper/kodekvalitet#testing","content":" Feilsøking er dobbelt så vanskelig som å skrive et program i utgangspunktet. Så hvis du er så smart som du kan være når du skriver det, hvordan vil du noensinne feilsøke det?  Hvorfor tester vi?​  Vi tester fordi:  Billigere / raskere å finne feilen tidlig i utviklingsprosessenRask tilbakemeldingFor å kunne refaktorereDokumentasjonGjøre det enklere å håndtere komplekse problemerRaskere utviklingBedre kode  Egenskapene til gode tester​  En test er mer en spesifikasjon enn en test. Den skal spesifisere hvordan noe fungerer.  Må være raske (vanligvis millisekunder)Tregere tester vil ofte være integrasjonstesterDel testene inn i enhets- og integrasjonstesterEn test må teste et konseptTesten bør rydde opp etter segUavhengig av rekkefølgeHold testene enkleUnngå å bruke rammeverk hvis mulig (for eksempel Spring)Testene må alltid kjøres før koden sjekkes inn i versjonskontrollen  Hvor mye av en applikasjon skal testes​  Det er ikke viktig å teste 100% av koden. Faktisk er det irrelevant hvor mange prosent av koden som er testet. Det viktige er å teste så mye av koden at du føler deg mindre stresset når du distribuerer og refaktorerer koden. Koden bør også være under kontinuerlig utvikling.  Ting å teste:  LogikkKode for kartleggingKontrollører - kontrakten mellom koden og andre systemerKode som trenger ekstra dokumentasjon  Ting å unngå å teste:  TredjepartsbibliotekerHvis du ender opp med å mocking alt ","version":"Next","tagName":"h3"}],"options":{"id":"default"}}